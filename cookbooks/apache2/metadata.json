{
  "name": "apache2",
  "description": "Installs and configures all aspects of apache2 using Debian style symlinks with helper definitions",
  "long_description": "Description\n===========\n\nThis cookbook provides a complete Debian/Ubuntu style Apache HTTPD configuration. Non-Debian based distributions such as Red Hat/CentOS, ArchLinux and others supported by this cookbook will have a configuration that mimics Debian/Ubuntu style as it is easier to manage with Chef.\n\nDebian-style Apache configuration uses scripts to manage modules and sites (vhosts). The scripts are:\n\n* a2ensite\n* a2dissite\n* a2enmod\n* a2dismod\n\nThis cookbook ships with templates of these scripts for non Debian/Ubuntu platforms. The scripts are used in the __Definitions__ below.\n\nRequirements\n============\n\n## Cookbooks:\n\nThis cookbook doesn't have direct dependencies on other cookbooks. Depending on your OS configuration and security policy, you may need additional recipes or cookbooks for this cookbook's recipes to converge on the node. In particular, the following Operating System nuances may affect the behavior:\n\n* apt cache outdated\n* SELinux enabled\n* IPtables\n* Compile tools\n\nOn Ubuntu/Debian, use Opscode's `apt` cookbook to ensure the package cache is updated so Chef can install packages, or consider putting apt-get in your bootstrap process or [knife bootstrap template](http://wiki.opscode.com/display/chef/Knife+Bootstrap).\n\nOn RHEL, SELinux is enabled by default. The `selinux` cookbook contains a `permissive` recipe that can be used to set SELinux to \"Permissive\" state.\n\nThe easiest but certainly not ideal way to deal with IPtables is of course to flush all rules. Opscode does provide an `iptables` cookbook but is migrating from the approach used there to a more robust solution utilizing a general \"firewall\" LWRP that would have an \"iptables\" provider. Alternately, you can use ufw, with Opscode's `ufw` and `firewall` cookbooks to set up rules. See those cookbooks' READMEs for documentation.\n\nBuild/compile tools may not be installed on the system by default. Some recipes (e.g., `apache2::mode_auth_openid`) build the module from source. Use Opscode's `build-essential` cookbook to get essential build packages installed.\n\n## Platforms:\n\n* Debian\n* Ubuntu\n* Red Hat/CentOS/Scientific Linux/Fedora (RHEL Family)\n* SUSE/OpenSUSE\n* ArchLinux\n\n### Notes for RHEL Family:\n\nOn Red Hat Enterprise Linux and derivatives, the EPEL repository may be necessary to install packages used in certain recipes. The `apache2::default` recipe, however, does not require any additional repositories. Opscode's `yum` cookbook contains a recipe to add the EPEL repository. See __Examples__ for more information.\n\nAttributes\n==========\n\nThis cookbook uses many attributes, broken up into a few different kinds.\n\nPlatform specific\n-----------------\n\nIn order to support the broadest number of platforms, several attributes are determined based on the node's platform. See the attributes/default.rb file for default values in the case statement at the top of the file.\n\n* `node['apache']['dir']` - Location for the Apache configuration\n* `node['apache']['log_dir']` - Location for Apache logs\n* `node['apache']['user']` - User Apache runs as\n* `node['apache']['group']` - Group Apache runs as\n* `node['apache']['binary']` - Apache httpd server daemon\n* `node['apache']['icondir']` - Location for icons\n* `node['apache']['cache_dir']` - Location for cached files used by Apache itself or recipes\n* `node['apache']['pid_file']` - Location of the PID file for Apache httpd\n* `node['apache']['lib_dir']` - Location for shared libraries\n\nGeneral settings\n----------------\n\nThese are general settings used in recipes and templates. Default values are noted.\n\n* `node['apache']['listen_ports']` - Ports that httpd should listen on. Default is an array of ports 80 and 443.\n* `node['apache']['contact']` - Value for ServerAdmin directive. Default \"ops@example.com\".\n* `node['apache']['timeout']` - Value for the Timeout directive. Default is 300.\n* `node['apache']['keepalive']` - Value for the KeepAlive directive. Default is On.\n* `node['apache']['keepaliverequests']` - Value for MaxKeepAliveRequests. Default is 100.\n* `node['apache']['keepalivetimeout']` - Value for the KeepAliveTimeout directive. Default is 5.\n* `node['apache']['default_modules']` - Array of module names. Can take \"mod_FOO\" or \"FOO\" as names, where FOO is the apache module, e.g. \"`mod_status`\" or \"`status`\".\n\nThe modules listed in `default_modules` will be included as recipes in `recipe[apache::default]`.\n\nPrefork attributes\n------------------\n\nPrefork attributes are used for tuning the Apache HTTPD prefork MPM configuration.\n\n* `node['apache']['prefork']['startservers']` - initial number of server processes to start. Default is 16.\n* `node['apache']['prefork']['minspareservers']` - minimum number of spare server processes. Default 16.\n* `node['apache']['prefork']['maxspareservers']` - maximum number of spare server processes. Default 32.\n* `node['apache']['prefork']['serverlimit']` - upper limit on configurable server processes. Default 400.\n* `node['apache']['prefork']['maxclients']` - Maximum number of simultaneous connections.\n* `node['apache']['prefork']['maxrequestsperchild']` - Maximum number of request a child process will handle. Default 10000.\n\nWorker attributes\n-----------------\n\nWorker attributes are used for tuning the Apache HTTPD worker MPM configuration.\n\n* `node['apache']['worker']['startservers']` - Initial number of server processes to start. Default 4\n* `node['apache']['worker']['maxclients']` - Maximum number of simultaneous connections. Default 1024.\n* `node['apache']['worker']['minsparethreads]` - Minimum number of spare worker threads. Default 64\n* `node['apache']['worker']['maxsparethreads]` - Maximum number of spare worker threads. Default 192.\n* `node['apache']['worker']['maxrequestsperchild']` - Maximum number of requests a child process will handle.\n\nmod\\_auth\\_openid attributes\n----------------------------\n\nThe following attributes are in the `attributes/mod_auth_openid.rb` file. Like all Chef attributes files, they are loaded as well, but they're logistically unrelated to the others, being specific to the `mod_auth_openid` recipe.\n\n* `node['apache']['mod_auth_openid']['checksum']` - sha256sum of the tarball containing the source.\n* `node['apache']['mod_auth_openid']['version']` - version of the `mod_auth_openid` to download.\n* `node['apache']['mod_auth_openid']['cache_dir']` - the cache directory is where the sqlite3 database is stored. It is separate so it can be managed as a directory resource.\n* `node['apache']['mod_auth_openid']['dblocation']` - filename of the sqlite3 database used for directive `AuthOpenIDDBLocation`, stored in the `cache_dir` by default.\n* `node['apache']['mod_auth_openid']['configure_flags']` - optional array of configure flags passed to the `./configure` step in the compilation of the module.\n\nRecipes\n=======\n\nMost of the recipes in the cookbook are for enabling Apache modules. Where additional configuration or behavior is used, it is documented below in more detail.\n\nThe following recipes merely enable the specified module: `mod_alias`, `mod_basic`, `mod_digest`, `mod_authn_file`, `mod_authnz_ldap`, `mod_authz_default`, `mod_authz_groupfile`, `mod_authz_host`, `mod_authz_user`, `mod_autoindex`, `mod_cgi`, `mod_dav_fs`, `mod_dav_svn`, `mod_deflate`, `mod_dir`, `mod_env`, `mod_expires`, `mod_headers`, `mod_ldap`, `mod_log_config`, `mod_mime`, `mod_negotiation`, `mod_proxy`, `mod_proxy_ajp`, `mod_proxy_balancer`, `mod_proxy_connect`, `mod_proxy_http`, `mod_python`, `mod_rewrite`, `mod_setenvif`, `mod_status`, `mod_wsgi`, `mod_xsendfile`.\n\nOn RHEL Family distributions, certain modules ship with a config file with the package. The recipes here may delete those configuration files to ensure they don't conflict with the settings from the cookbook, which will use per-module configuration in `/etc/httpd/mods-enabled`.\n\ndefault\n-------\n\nThe default recipe does a number of things to set up Apache HTTPd. It also includes a number of modules based on the attribute `node['apache']['default_modules']` as recipes.\n\nmod\\_auth\\_openid\n-----------------\n\n**Changed via COOK-915**\n\nThis recipe compiles the module from source. In addition to `build-essential`, some other packages are included for installation like the GNU C++ compiler and development headers.\n\nTo use the module in your own cookbooks to authenticate systems using OpenIDs, specify an array of OpenIDs that are allowed to authenticate with the attribute `node['apache']['allowed_openids']`. Use the following in a vhost to protect with OpenID authentication:\n\n    AuthType OpenID\n    require user <%= node['apache']['allowed_openids'].join(' ') %>\n    AuthOpenIDDBLocation <%= node['apache']['mod_auth_openid']['dblocation'] %>\n\nChange the DBLocation with the attribute as required; this file is in a different location than previous versions, see below. It should be a sane default for most platforms, though, see `attributes/mod_auth_openid.rb`.\n\n### Changes from COOK-915:\n\n* `AuthType OpenID` instead of `AuthOpenIDEnabled On`.\n* `require user` instead of `AuthOpenIDUserProgram`.\n* A bug(?) in `mod_auth_openid` causes it to segfault when attempting to update the database file if the containing directory is not writable by the HTTPD process owner (e.g., www-data), even if the file is writable. In order to not interfere with other settings from the default recipe in this cookbook, the db file is moved.\n\nmod\\_fcgid\n----------\n\nInstalls the fcgi package and enables the module. Requires EPEL on RHEL family.\n\nOn RHEL family, this recipe will delete the fcgid.conf and on version 6+, create the /var/run/httpd/mod_fcgid` directory, which prevents the emergency error:\n\n    [emerg] (2)No such file or directory: mod_fcgid: Can't create shared memory for size XX bytes\n\nmod\\_php5\n--------\n\nSimply installs the appropriate package on Debian, Ubuntu and ArchLinux.\n\nOn Red Hat family distributions including Fedora, the php.conf that comes with the package is removed. On RHEL platforms less than v6, the `php53` package is used.\n\nmod\\_ssl\n--------\n\nBesides installing and enabling `mod_ssl`, this recipe will append port 443 to the `node['apache']['listen_ports']` attribute array and update the ports.conf.\n\ngod\\_monitor\n------------\n\nSets up a `god` monitor for Apache. External requirements are the `god` and `runit` cookbooks from Opscode.\n\nDefinitions\n===========\n\nThe cookbook provides a few definitions. At some point in the future these definitions may be refactored into lightweight resources and providers.\n\napache\\_conf\n------------\n\nSets up configuration file for an Apache module from a template. The template should be in the same cookbook where the definition is used. This is used by the `apache_module` definition and is not often used directly.\n\nThis will use a template resource to write the module's configuration file in the `mods-available` under the Apache configuration directory (`node['apache']['dir']`). This is a platform-dependent location. See __apache\\_module__.\n\n### Parameters:\n\n* `name` - Name of the template. When used from the `apache_module`, it will use the same name as the module.\n\n### Examples:\n\nCreate `#{node['apache']['dir']}/mods-available/alias.conf`.\n\n    apache_conf \"alias\"\n\napache\\_module\n--------------\n\nEnable or disable an Apache module in `#{node['apache']['dir']}/mods-available` by calling `a2enmod` or `a2dismod` to manage the symbolic link in `#{node['apache']['dir']}/mods-enabled`. If the module has a configuration file, a template should be created in the cookbook where the definition is used. See __Examples__.\n\n### Parameters:\n\n* `name` - Name of the module enabled or disabled with the `a2enmod` or `a2dismod` scripts.\n* `enable` - Default true, which uses `a2enmod` to enable the module. If false, the module will be disabled with `a2dismod`.\n* `conf` - Default false. Set to true if the module has a config file, which will use `apache_conf` for the file.\n* `filename` - specify the full name of the file, e.g.\n\n### Examples:\n\nEnable the ssl module, which also has a configuration template in `templates/default/ssl.conf.erb`.\n\n    apache_module \"ssl\" do\n      conf true\n    end\n\nEnable the php5 module, which has a different filename than the module default:\n\n    apache_module \"php5\" do\n      filename \"libphp5.so\"\n    end\n\nDisable a module:\n\n    apache_module \"disabled_module\" do\n      enable false\n    end\n\nSee the recipes directory for many more examples of `apache_module`.\n\napache\\_site\n------------\n\nEnable or disable a VirtualHost in `#{node['apache']['dir']}/sites-available` by calling a2ensite or a2dissite to manage the symbolic link in `#{node['apache']['dir']}/sites-enabled`.\n\nThe template for the site must be managed as a separate resource. To combine the template with enabling a site, see `web_app`.\n\n### Parameters:\n\n* `name` - Name of the site.\n* `enable` - Default true, which uses `a2ensite` to enable the site. If false, the site will be disabled with `a2dissite`.\n\nweb\\_app\n--------\n\nManage a template resource for a VirtualHost site, and enable it with `apache_site`. This is commonly done for managing web applications such as Ruby on Rails, PHP or Django, and the default behavior reflects that. However it is flexible.\n\nThis definition includes some recipes to make sure the system is configured to have Apache and some sane default modules:\n\n* `apache2`\n* `apache2::mod_rewrite`\n* `apache2::mod_deflate`\n* `apache2::mod_headers`\n\nIt will then configure the template (see __Parameters__ and __Examples__ below), and enable or disable the site per the `enable` parameter.\n\n### Parameters:\n\nCurrent parameters used by the definition:\n\n* `name` - The name of the site. The template will be written to `#{node['apache']['dir']}/sites-available/#{params[:name]}.conf`\n* `cookbook` - Optional. Cookbook where the source template is. If this is not defined, Chef will use the named template in the cookbook where the definition is used.\n* `template` - Default `web_app.conf.erb`, source template file. \n* `enable` - Default true. Passed to the `apache_site` definition.\n\nAdditional parameters can be defined when the definition is called in a recipe, see __Examples__.\n\n### Examples:\n\nAll parameters are passed into the template. You can use whatever you like. The apache2 cookbook comes with a `web_app.conf.erb` template as an example. The following parameters are used in the template:\n\n* `server_name` - ServerName directive.\n* `server_aliases` - ServerAlias directive. Must be an array of aliases.\n* `docroot` - DocumentRoot directive.\n* `application_name` - Used in RewriteLog directive. Will be set to the `name` parameter.\n\nTo use the default web_app, for example:\n\n    web_app \"my_site\" do\n      server_name node['hostname']\n      server_aliases [node['fqdn'], \"my-site.example.com\"]\n      docroot \"/srv/www/my_site\"\n    end\n\nThe parameters specified will be used as:\n\n* `@params[:server_name]`\n* `@params[:server_aliases]`\n* `@params[:docroot]`\n\nIn the template. When you write your own, the `@` is significant.\n\nFor more information about Definitions and parameters, see the [Chef Wiki](http://wiki.opscode.com/display/chef/Definitions)\n\nUsage\n=====\n\nUsing this cookbook is relatively straightforward. Add the desired recipes to the run list of a node, or create a role. Depending on your environment, you may have multiple roles that use different recipes from this cookbook. Adjust any attributes as desired. For example, to create a basic role for web servers that provide both HTTP and HTTPS:\n\n    % cat roles/webserver.rb\n    name \"webserver\"\n    description \"Systems that serve HTTP and HTTPS\"\n    run_list(\n      \"recipe[apache2]\",\n      \"recipe[apache2::mod_ssl]\"\n    )\n    default_attributes(\n      \"apache2\" => {\n        \"listen_ports\" => [\"80\", \"443\"]\n      }\n    )\n\nFor examples of using the definitions in your own recipes, see their respective sections above.\n\nLicense and Authors\n===================\n\nAuthor:: Adam Jacob <adam@opscode.com>\nAuthor:: Joshua Timberman <joshua@opscode.com>\nAuthor:: Bryan McLellan <bryanm@widemile.com>\nAuthor:: Dave Esposito <esposito@espolinux.corpnet.local>\nAuthor:: David Abdemoulaie <github@hobodave.com>\nAuthor:: Edmund Haselwanter <edmund@haselwanter.com>\nAuthor:: Eric Rochester <err8n@virginia.edu>\nAuthor:: Jim Browne <jbrowne@42lines.net>\nAuthor:: Matthew Kent <mkent@magoazul.com>\nAuthor:: Nathen Harvey <nharvey@customink.com>\nAuthor:: Ringo De Smet <ringo.de.smet@amplidata.com>\nAuthor:: Sean OMeara <someara@opscode.com>\nAuthor:: Seth Chisamore <schisamo@opscode.com>\nAuthor:: Gilles Devaux <gilles@peerpong.com>\n\nCopyright:: 2009-2011, Opscode, Inc\nCopyright:: 2011, Atriso\nCopyright:: 2011, CustomInk, LLC.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "Opscode, Inc.",
  "maintainer_email": "cookbooks@opscode.com",
  "license": "Apache 2.0",
  "platforms": {
    "redhat": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "scientific": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "debian": ">= 0.0.0",
    "ubuntu": ">= 0.0.0",
    "arch": ">= 0.0.0",
    "freebsd": ">= 0.0.0"
  },
  "dependencies": {
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
    "apache": {
      "display_name": "Apache Hash",
      "description": "Hash of Apache attributes",
      "type": "hash",
      "choice": [

      ],
      "calculated": false,
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/dir": {
      "display_name": "Apache Directory",
      "description": "Location for Apache configuration",
      "default": "/etc/apache2",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/log_dir": {
      "display_name": "Apache Log Directory",
      "description": "Location for Apache logs",
      "default": "/etc/apache2",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/user": {
      "display_name": "Apache User",
      "description": "User Apache runs as",
      "default": "www-data",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/binary": {
      "display_name": "Apache Binary",
      "description": "Apache server daemon program",
      "default": "/usr/sbin/apache2",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/icondir": {
      "display_name": "Apache Icondir",
      "description": "Directory location for icons",
      "default": "/usr/share/apache2/icons",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/listen_ports": {
      "display_name": "Apache Listen Ports",
      "description": "Ports that Apache should listen on",
      "type": "array",
      "default": [
        "80",
        "443"
      ],
      "choice": [

      ],
      "calculated": false,
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/contact": {
      "display_name": "Apache Contact",
      "description": "Email address of webmaster",
      "default": "ops@example.com",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/timeout": {
      "display_name": "Apache Timeout",
      "description": "Connection timeout value",
      "default": "300",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/keepalive": {
      "display_name": "Apache Keepalive",
      "description": "HTTP persistent connections",
      "default": "On",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/keepaliverequests": {
      "display_name": "Apache Keepalive Requests",
      "description": "Number of requests allowed on a persistent connection",
      "default": "100",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/keepalivetimeout": {
      "display_name": "Apache Keepalive Timeout",
      "description": "Time to wait for requests on persistent connection",
      "default": "5",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/servertokens": {
      "display_name": "Apache Server Tokens",
      "description": "Server response header",
      "default": "Prod",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/serversignature": {
      "display_name": "Apache Server Signature",
      "description": "Configure footer on server-generated documents",
      "default": "On",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/traceenable": {
      "display_name": "Apache Trace Enable",
      "description": "Determine behavior of TRACE requests",
      "default": "On",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/allowed_openids": {
      "display_name": "Apache Allowed OpenIDs",
      "description": "Array of OpenIDs allowed to authenticate",
      "default": "",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/prefork": {
      "display_name": "Apache Prefork",
      "description": "Hash of Apache prefork tuning attributes.",
      "type": "hash",
      "choice": [

      ],
      "calculated": false,
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/prefork/startservers": {
      "display_name": "Apache Prefork MPM StartServers",
      "description": "Number of MPM servers to start",
      "default": "16",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/prefork/minspareservers": {
      "display_name": "Apache Prefork MPM MinSpareServers",
      "description": "Minimum number of spare server processes",
      "default": "16",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/prefork/maxspareservers": {
      "display_name": "Apache Prefork MPM MaxSpareServers",
      "description": "Maximum number of spare server processes",
      "default": "32",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/prefork/serverlimit": {
      "display_name": "Apache Prefork MPM ServerLimit",
      "description": "Upper limit on configurable server processes",
      "default": "400",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/prefork/maxclients": {
      "display_name": "Apache Prefork MPM MaxClients",
      "description": "Maximum number of simultaneous connections",
      "default": "400",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/prefork/maxrequestsperchild": {
      "display_name": "Apache Prefork MPM MaxRequestsPerChild",
      "description": "Maximum number of request a child process will handle",
      "default": "10000",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/worker": {
      "display_name": "Apache Worker",
      "description": "Hash of Apache prefork tuning attributes.",
      "type": "hash",
      "choice": [

      ],
      "calculated": false,
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/worker/startservers": {
      "display_name": "Apache Worker MPM StartServers",
      "description": "Initial number of server processes to start",
      "default": "4",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/worker/maxclients": {
      "display_name": "Apache Worker MPM MaxClients",
      "description": "Maximum number of simultaneous connections",
      "default": "1024",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/worker/minsparethreads": {
      "display_name": "Apache Worker MPM MinSpareThreads",
      "description": "Minimum number of spare worker threads",
      "default": "64",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/worker/maxsparethreads": {
      "display_name": "Apache Worker MPM MaxSpareThreads",
      "description": "Maximum number of spare worker threads",
      "default": "192",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/worker/threadsperchild": {
      "display_name": "Apache Worker MPM ThreadsPerChild",
      "description": "Constant number of worker threads in each server process",
      "default": "64",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/worker/maxrequestsperchild": {
      "display_name": "Apache Worker MPM MaxRequestsPerChild",
      "description": "Maximum number of request a child process will handle",
      "default": "0",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    },
    "apache/default_modules": {
      "display_name": "Apache Default Modules",
      "description": "Default modules to enable via recipes",
      "default": "status alias auth_basic authn_file authz_default authz_groupfile authz_host authz_user autoindex dir env mime negotiation setenvif",
      "choice": [

      ],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [

      ]
    }
  },
  "groupings": {
  },
  "recipes": {
    "apache2": "Main Apache configuration",
    "apache2::mod_alias": "Apache module 'alias' with config file",
    "apache2::mod_apreq2": "Apache module 'apreq'",
    "apache2::mod_auth_basic": "Apache module 'auth_basic'",
    "apache2::mod_auth_digest": "Apache module 'auth_digest'",
    "apache2::mod_auth_openid": "Apache module 'authopenid'",
    "apache2::mod_authn_file": "Apache module 'authn_file'",
    "apache2::mod_authnz_ldap": "Apache module 'authnz_ldap'",
    "apache2::mod_authz_default": "Apache module 'authz_default'",
    "apache2::mod_authz_groupfile": "Apache module 'authz_groupfile'",
    "apache2::mod_authz_host": "Apache module 'authz_host'",
    "apache2::mod_authz_user": "Apache module 'authz_user'",
    "apache2::mod_autoindex": "Apache module 'autoindex' with config file",
    "apache2::mod_cgi": "Apache module 'cgi'",
    "apache2::mod_dav": "Apache module 'dav'",
    "apache2::mod_dav_svn": "Apache module 'dav_svn'",
    "apache2::mod_deflate": "Apache module 'deflate' with config file",
    "apache2::mod_dir": "Apache module 'dir' with config file",
    "apache2::mod_env": "Apache module 'env'",
    "apache2::mod_expires": "Apache module 'expires'",
    "apache2::mod_fcgid": "Apache module 'fcgid', package on ubuntu/debian, rhel/centos, compile source on suse; with config file",
    "apache2::mod_headers": "Apache module 'headers'",
    "apache2::mod_ldap": "Apache module 'ldap'",
    "apache2::mod_log_config": "Apache module 'log_config'",
    "apache2::mod_mime": "Apache module 'mime' with config file",
    "apache2::mod_negotiation": "Apache module 'negotiation' with config file",
    "apache2::mod_perl": "Apache module 'perl'",
    "apache2::mod_php5": "Apache module 'php5'",
    "apache2::mod_proxy": "Apache module 'proxy' with config file",
    "apache2::mod_proxy_ajp": "Apache module 'proxy_ajp'",
    "apache2::mod_proxy_balancer": "Apache module 'proxy_balancer'",
    "apache2::mod_proxy_connect": "Apache module 'proxy_connect'",
    "apache2::mod_proxy_http": "Apache module 'proxy_http'",
    "apache2::mod_python": "Apache module 'python'",
    "apache2::mod_rewrite": "Apache module 'rewrite'",
    "apache2::mod_setenvif": "Apache module 'setenvif' with config file",
    "apache2::mod_ssl": "Apache module 'ssl' with config file, adds port 443 to listen_ports",
    "apache2::mod_status": "Apache module 'status' with config file",
    "apache2::mod_xsendfile": "Apache module 'xsendfile'"
  },
  "version": "1.1.2"
}